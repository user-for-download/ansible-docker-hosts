---
- name: Delete old Gluster volume
  ansible.builtin.file:
    path: "{{ gluster_volume_path }}/{{ inventory_hostname }}/brick"
    state: absent
    force: true

- name: Create XFS Path {{ gluster_volume_path }}/{{ inventory_hostname }}
  ansible.builtin.file:
    path: "{{ gluster_volume_path }}/{{ inventory_hostname }}"
    state: directory

- name: Create a XFS filesystem on {{ device2_hdd_dev }}
  community.general.filesystem:
    fstype: xfs
    dev: "{{ device2_hdd_dev }}"

- name: Mount XFS volume {{ device2_hdd_dev }} to {{ gluster_volume_path }}/{{ inventory_hostname }}
  ansible.posix.mount:
    path: "{{ gluster_volume_path }}/{{ inventory_hostname }}"
    src: "{{ device2_hdd_dev }}"
    fstype: xfs
    state: mounted

- name: Verify Gluster dependencies
  ansible.builtin.apt:
    pkg:
      - xfsprogs
      - attr
      - glusterfs-server
      - glusterfs-common
      - glusterfs-client
    state: present
    force_apt_get: true
    update_cache: true

- name: Enable Gluster service
  ansible.builtin.systemd:
    name: glusterd
    enabled: true
    state: started

- name: Check if Gluster volume is initialized
  ansible.builtin.stat:
    path: "{{ gluster_volume_path }}/{{ inventory_hostname }}/brick"
  register: glustervolume

- name: Verify Gluster volume path
  ansible.builtin.file:
    path: "{{ gluster_volume_path }}/{{ inventory_hostname }}/brick"
    state: directory

- name: Initialize Gluster Cluster (on first node)
  when: glustervolume.stat.exists == false
  loop: "{{ groups['gluster_nodes'] }}"
  run_once: true
  ansible.builtin.command: gluster peer probe {{ item }}
- name: Create Gluster Volume (on first node)
  when: glustervolume.stat.exists == false
  run_once: true
  ansible.builtin.shell: >
    gluster volume create {{ gluster_volume_name }} replica 3 arbiter 1
    {{ groups['gluster_nodes'][2] }}:{{ gluster_volume_path }}/{{ groups['gluster_nodes'][2] }}/brick
    {{ groups['gluster_nodes'][0] }}:{{ gluster_volume_path }}/{{ groups['gluster_nodes'][0] }}/brick
    {{ groups['gluster_nodes'][1] }}:{{ gluster_volume_path }}/{{ groups['gluster_nodes'][1] }}/brick
- name: Concatenate a list to string
  run_once: true
  ansible.builtin.set_fact:
    allow_hosts: "{{ groups['ubuntu'] | join(',') }}"

- name: Secure Gluster Volume (on first node)
  run_once: true
  ansible.builtin.shell: |
    gluster volume set {{ gluster_volume_name }} auth.allow {{ allow_hosts }}
- name: Start Gluster Volume (on first node)
  when: glustervolume.stat.exists == false
  run_once: true
  ansible.builtin.command: gluster volume start {{ gluster_volume_name }}
- name: Wait 30s for Gluster volume to be replicated
  run_once: true
  when: glustervolume.stat.exists == false
  ansible.builtin.command: sleep 30
- name: Verify Gluster mount path
  ansible.builtin.file:
    path: "{{ gluster_mount_path }}"
    state: directory

- name: Mount Gluster volume {{ gluster_volume_name }} to {{ gluster_mount_path }}
  ansible.posix.mount:
    path: "{{ gluster_mount_path }}"
    src: localhost:/{{ gluster_volume_name }}
    fstype: glusterfs
    opts: defaults,_netdev,backupvolfile-server=localhost
    state: mounted
